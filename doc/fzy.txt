*fzy.txt* Neovim frontend for the fzy fuzzy finder

nvim-fzy provides an implementation for vim.ui.select and a method to pipe the
output of an executable to `fzy`.

It's best used with picker implementations from nvim-qwahl.



                                      Type |gO| to see the table of contents.
==============================================================================
API                                                                    *fzy-api*



execute({choices_cmd}, {on_selection}, {prompt})                  *fzy.execute()*

      This is the low-level API. It invokes the choices_cmd and opens a popup
      running fzy so that the user can make a selection.


      Parameters:
          {choices_cmd}   A shell command that must output newline separated
                          entries that form the choices.
          {on_selection}  A callback that is invoked with either `nil` if
                          the user cancelled the action, or the selection the
                          user made.
          {prompt}        Prompt text displayed in the popup.


pick_one({items}, {prompt}, {label_fn}, {cb})                    *fzy.pick_one()*

      Slightly higher level API. It takes a list of arbitrary items and a
      function to render the items to the user.

      The callback (`cb`) will receive the choice the user made or `nil`

      Parameters:
          {items}     A table (array) of arbitrary items
          {prompt}    Prompt text displayed to the user in the selection popup.
          {label_fn}  A function which will be called with an item from
                      {items} as argument and must return a text.
                      The text is what the user will see when prompted to make
                      a choice.
                      Can be `nil` in which case |vim.inspect()| will be used to
                      render the item.
          {cb}        Callback that will be invoked with the choice, or `nil`
                      if the user aborted.


sinks.edit_file                                            *fzy.sinks.edit_file*


      A callback that can be used with |fzy.execute()|. It invokes `:e` on the
      selection.

      Example usage:
      >
          fzy.execute('git ls-files', fzy.sinks.edit_file)


sinks.edit_live_grep                                  *fzy.sinks.edit_live_grep*


      A callback that can be used with |fzy.execute()|. It parses the live
      grep selection and invokes `:e +line-number` on the filename. The
      selection format should have the following format:

      {filename}:{line-number}:{search-preview}

      Example usage with `ag`:
      >
          fzy.execute('ag --nobreak --noheading .', fzy.sinks.edit_live_grep)
<
      Example usage with `rg`:
      >
          fzy.execute('rg --no-heading --trim -nH .', fzy.sinks.edit_live_grep)


new_popup                                                        *fzy.new_popup*

      Function used to create the buffer and window to host the `fzy`
      execution. You can override this for customization.

      The function is required to return the window number and the buffer
      number.
